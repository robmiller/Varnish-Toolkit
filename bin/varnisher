#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'

require 'main'
require 'yaml'

require 'varnisher'

Main {
  examples 'varnisher purge http://example.com', 'varnisher spider example.com', 'varnisher purge --reindex example.com'

  description 'Varnisher is a set of tools for working with the Varnish HTTP cache.'

  argument 'target'

  option('v', 'verbose') {
    description "If given, Varnisher will be noisier about what it's up to."
  }

  option('q', 'quiet') {
    description 'If given, Varnisher will be silent apart from errors.'
  }

  option('H', 'hostname') {
    argument :required
    description 'The hostname/IP address of your Varnish server.'
  }

  option('p', 'port') {
    argument :required
    cast :int
    description 'The port Varnish is listening on.'
  }

  option('o', 'output-file') {
    argument :required
    description 'A file to output log information to. If not given, output will be printed to STDOUT'
  }

  def before_run
    load_config
  end

  mode 'purge' do
    argument('target') { description 'The URL or hostname to purge' }

    option('reindex') {
      description 'If you specify a hostname to purge, this option will respider that hostname after the purging is complete. This will keep your cache as warm as possible.'
    }

    def run
      target = params['target'].value

      # If target is a valid URL, then assume we're purging a page and its contents.
      if target =~ %r(^[a-z]+://)
        purger = Varnisher::PagePurger.new target
        purger.purge
      # If target is a hostname, assume we want to purge an entire domain.
      elsif target =~ /^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$/
        purger = Varnisher::DomainPurger.new target
        purger.purge

        if params['reindex'].given?
          spider = Varnisher::Spider.new "http://#{target}/"
          spider.run
        end
      end
    end
  end

  mode 'spider' do
    argument('target') { description 'The URL to begin spidering from.' }

    option('n', 'num-pages') {
      argument :required
      cast :int
      description 'Maximum number of pages to crawl. Setting this to -1 (the default) will impose no limit.'
    }

    option('t', 'threads') {
      argument :required
      cast :int
      description 'Spidering is done in parallel; this variable controls how many threads will be used.'
    }

    option('#', 'ignore-hashes') {
      description 'When given, /foo#foo and /foo#bar will be treated as separate URLs; the default is to treat them as the same resource.'
    }

    option('q', 'ignore-query-strings') {
      description 'When given, /foo?foo=bar and /foo?foo=baz will be treated as the same resource.'
    }

    option('f', 'filter-by-css') {
      argument :optional
      description 'When given, it will be used to crawl some specific area of the page.'
    }

    def run
      target = params['target'].value

      spider = Varnisher::Spider.new target
      spider.run
    end
  end

  def load_config
    # Start with our default options.
    options = Varnisher.options

    # Check the user's RC file -- if it exists -- to see if they've
    # specified any defaults of their own.
    rcfile = File.expand_path('~/.varnishrc')
    if FileTest.readable? rcfile
      rc = YAML.load(File.open(rcfile))
      options.merge!(rc)
    end

    # The highest priority is given to command line arguments, so that
    # the user can override things that are in their RC file if they
    # choose to.
    options.merge!(params.to_options.reject { |k, v| v.nil? })

    Varnisher.options = options
  end
}

